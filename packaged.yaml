AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AWS Serverless Application

  Sample SAM Template for AWS Serverless Application

  '
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        USER_TABLE: UsersTable
        COURSE_TABLE: CourseTable
        AUTH_TABLE: AuthsTable
Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: last_login
        AttributeType: N
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: last_login
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    Metadata:
      SamResourceId: UsersTable
  AuthsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AuthsTable
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: auth_token
        AttributeType: S
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: auth_token
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true
    Metadata:
      SamResourceId: AuthsTable
  CourseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CourseTable
      AttributeDefinitions:
      - AttributeName: course_id
        AttributeType: S
      KeySchema:
      - AttributeName: course_id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    DynamoStreamProcessorFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: .
        Handler: process_stream.lambda_handler
        Runtime: python3.7
        Events:
          DynamoDB1:
            Type: DynamoDB
            Properties:
              Stream:
                Fn::GetAtt:
                - UsersTable
                - StreamArn
              StartingPosition: TRIM_HORIZON
              BatchSize: 1
    Metadata:
      SamResourceId: CourseTable
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/1747b2c11452f2f9bb34799b3e266f42
      Handler: create_user.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /users
            Method: put
    Metadata:
      SamResourceId: CreateUserFunction
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/1747b2c11452f2f9bb34799b3e266f42
      Handler: get_user.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /users/{userid}
            Method: get
    Metadata:
      SamResourceId: GetUserFunction
  AddCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/a5eda1304223c4901c952eb4d28e8ed9
      Handler: add_course.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CourseTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /users/{userid}/{courseid}
            Method: put
    Metadata:
      SamResourceId: AddCourseFunction
  CreateCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/77486f3a7325e470c0bc1b7ba9805e94
      Handler: create_course.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CourseTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /courses
            Method: put
    Metadata:
      SamResourceId: CreateCourseFunction
  GetCourseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/60db46bb393f90ecf2b23bf3e1ce9ae8
      Handler: get_course.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CourseTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /courses/{courseid}
            Method: get
    Metadata:
      SamResourceId: GetCourseFunction
  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/60db46bb393f90ecf2b23bf3e1ce9ae8
      Handler: login_user.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: AuthsTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /users/{userid}/login
            Method: post
    Metadata:
      SamResourceId: LoginUserFunction
  ValidateAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://plm-hands-on-dynamodb-lab/60db46bb393f90ecf2b23bf3e1ce9ae8
      Handler: validate_auth.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: AuthsTable
      Events:
        Createuser:
          Type: Api
          Properties:
            Path: /someaction
            Method: post
    Metadata:
      SamResourceId: ValidateAuthFunction
